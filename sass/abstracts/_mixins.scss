@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin section-bg($img, $clip-path: "none",$x1: "",$y1: "",$x2: "",$y2: "",$x3: "",$y3: "",$x4: "",$y4: "",) {
  // @if - to clip bg in a polygon shape
  // @else - no clipping
  @if $clip-path == "polygon" {
    @include cbs(clip-path,
      polygon(
        $x1 $y1,
        $x2 $y2,
        $x3 $y3,
        $x4 $y4));
    background-image:
      linear-gradient(
        135deg, 
        rgba($color-primary-light, 0.8), 
        rgba($color-primary-dark, 0.8)), 
      url('../img/#{$img}');
    background-position: top;
    background-size: cover;
  } @else {
    background-image:
      linear-gradient(
        135deg, 
        rgba($color-primary-light, 0.8), 
        rgba($color-primary-dark, 0.8)), 
      url('../img/#{$img}');
    background-position: top;
    background-size: cover;
  }
}

//bg gradient for gradient text
@mixin gradient-text($to-right-or-left, $color-1, $color-2, $bg-or-text-color: 'bg') {
  //leave empty for gradient coloured text
  @if $bg-or-text-color != 'bg' {
    color: $color-primary;
    
    @supports (background-clip: text) or (-webkit-background-clip: text) {
      background-image: 
      linear-gradient(
        #{$to-right-or-left}, 
        #{$color-1}, 
        #{$color-2});
      display: inline-block;
      -webkit-background-clip: text;
      color: transparent;
    }
  } @else {
    background-image: 
    linear-gradient(
      #{$to-right-or-left}, 
      #{$color-1}, 
      #{$color-2});
  }
}

//bg linear gradient
@mixin linear-gradient($to-right-or-left, $color-1, $color-2, $img: none) {
  //@if - for an image background
  //@lse - only the gradient
  @if $img != 'none' {
    background-image: 
    linear-gradient(
      #{$to-right-or-left}, 
      #{$color-1}, 
      #{$color-2}),
    url('../img/#{$img}');
  } @else {
    background-image: 
    linear-gradient(
      #{$to-right-or-left}, 
      #{$color-1}, 
      #{$color-2});
  }
}

//cross browser support
@mixin cbs($property, $val) {
  -webkit-#{$property}: $val;
  -moz-#{$property}: $val;
  -ms-#{$property}: $val;
  -o-#{$property}: $val;
  #{$property}: $val;
}

@mixin center-absolute($x-y-xy) {
// y - to center vertically
// x - to center horizontally
// xy - to center on both axes
  @if $x-y-xy == 'y' {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }@else if $x-y-xy == 'x' {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
  }@else if $x-y-xy == 'xy' {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

//--| MEDIA QUERY MANAGER
/* INFO 

0 - 600px     : Phone
600 - 900px   : Tablet portrait
900 - 1200px  : Tablet landscape
12000 - 1800px: Desktop
1800px +      : Big desktop
192dpi        : Retina displays

$breakpoint argument choices:
- phone
- portrait
- landscape
- whale
- retina

ORDER: Base + typography > general layout + grid > page layout > components

Breakpoints in EM units.
1em = 16px default.
*/

@mixin respond($breakpoint) {
  @if $breakpoint == 'phone' {
      @media only screen and (max-width: 37.5em) {@content}; // 600px / 16 = 37.5em
  }
  @if $breakpoint == 'portrait' {
    @media only screen and (max-width: 56.25em) {@content}; // 900px / 16 = 56.25em
  }
  @if $breakpoint == 'landscape' {
    @media only screen and (max-width: 75em) {@content}; // 1200px / 16 = 75em
  }
  @if $breakpoint == 'whale' {
    @media only screen and (min-width: 112.5em) {@content}; // 1800px / 16 = 112.5em
  }
  @if $breakpoint == 'retina' {
    @media only screen and (min-resolution: 192dpi) {@content}; // for retina displays
  }
}